import * as React from 'react'
import * as ReactDOM from 'react-dom'
import * as deepmerge from 'deepmerge'
import RuntimeModule from './runtimeModule'
import { IAppConfig } from './types'
<% if (globalStyle) {%>import '../<%= globalStyle %>'<% } %>

const defaultAppConfig = {
  app: {
    rootId: 'ice-container',
  },
  router: {
    type: 'hash',
  }
}

function createApp(customConfig: IAppConfig) {
  const appConfig = deepmerge(defaultAppConfig, customConfig)
  const runtime = new RuntimeModule(appConfig, <%- buildConfig %>)
  <% if (runtimeModules.length) {%>
  runtime.loadModlues([<% runtimeModules.forEach((modulePath) => { %>require('<%= modulePath %>'),<% }); %>])
  <% } %>

  renderApp(runtime).catch(err => {
    console.log('renderApp error:', err)
  })
}

function renderApp(runtime) {
  const { appConfig, modifyDOMRender } = runtime
  const { rootId, mountNode } = appConfig.app
  const appMountNode = mountNode || document.getElementById(rootId)
  const AppProvider = runtime.composeAppProvider();
  const AppRouter = runtime.getAppRouter();

  function App() {
    const appContent = (
      <AppRouter />
    );
    return AppProvider ? <AppProvider>{appContent}</AppProvider> : appContent;
  }

  if (modifyDOMRender) {
    return modifyDOMRender({ App, appMountNode })
  } else {
    return new Promise(resolve => {
      ReactDOM.render(<App />, appMountNode, () => {
        resolve()
      })
    })
  }
}

export { createApp }
