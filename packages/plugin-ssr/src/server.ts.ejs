import * as cheerio from 'cheerio'
import { matchPath } from 'ice'
import { createAppWithSSR, getAppConfig } from './createApp'
import routes from '@/routes'
import '@/app'

// appConfig set by: import '@/app'
const appConfig = getAppConfig()

const serverRender = async ({ context, pathname, initialData, htmlTemplate }) => {

  if (!initialData) {
    const getInitialData = appConfig.app && appConfig.app.getInitialData
    if (getInitialData) {
      console.log('[SSR]', 'getting initial data of app');
    }
    initialData = getInitialData ? await getInitialData() : {}
  }

  const PageComponent = getComponentByPath(routes, pathname)
  const getInitialProps = PageComponent && PageComponent.getInitialProps;
  if (getInitialProps) {
    console.log('[SSR]', 'getting initial props of page component');
  }
  const pageInitialProps = getInitialProps ? await getInitialProps() : {}
  console.log('[SSR]', 'generating html content');
  const bundleContent = createAppWithSSR(appConfig, {
    staticContext: context,
    pathname,
    initialData,
    pageInitialProps
  })
  const $ = cheerio.load(htmlTemplate || '__ICE_SERVER_HTML_TEMPLATE__')
  $('#ice-container').append(bundleContent)
  $('head').append(`<script>
    window.__ICE_APP_DATA__=${JSON.stringify(initialData)};
    window.__ICE_PAGE_PROPS__=${JSON.stringify(pageInitialProps)};
  </script>`)
  const html = $.html()
  return html
}

function getComponentByPath(routes, currPath)  {
  function findMatchRoute(routeList) {
    const matchedRoute = routeList.find(route => {
      return matchPath(currPath, route);
    });
    return matchedRoute.children ? findMatchRoute(matchedRoute.children) : matchedRoute;
  }
  const matchedRoute = findMatchRoute(routes);
  return matchedRoute && matchedRoute.component;
}

export default serverRender
