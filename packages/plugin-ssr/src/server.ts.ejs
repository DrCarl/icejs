import * as cheerio from 'cheerio';
import { matchPath } from 'ice';
import { createAppWithSSR, getAppConfig } from './createApp';
import routes from '@/routes';
import '@/app';

const chalk = require('chalk');

// appConfig set by: import '@/app'
const appConfig = getAppConfig();

const serverRender = async ({ context, pathname, initialData, htmlTemplate }) => {
  let errors = [];
  if (!initialData) {
    const getInitialData = appConfig.app && appConfig.app.getInitialData;
    if (getInitialData) {
      console.log('[SSR]', 'getting initial data of app');
      try {
        initialData = await getInitialData();
      } catch (error) {
        error.name = 'getInitialDataError';
        errors.push(error);
        logError('[SSR] get initial data error');
      }
    }
  }

  const PageComponent = getComponentByPath(routes, pathname);
  const getInitialProps = PageComponent && PageComponent.getInitialProps;

  let pageInitialProps;
  if (getInitialProps) {
    console.log('[SSR]', 'getting initial props of page component');
    try {
      pageInitialProps = await getInitialProps();
    } catch (error) {
      error.name = 'getInitialPropsError';
      errors.push(error);
      logError('[SSR] get page data error');
    }
  }

  console.log('[SSR]', 'generating html content');
  const $ = cheerio.load(htmlTemplate || '__ICE_SERVER_HTML_TEMPLATE__');
  try {
    if (!errors.length) {
      const bundleContent = createAppWithSSR(appConfig, {
        staticContext: context,
        pathname,
        initialData,
        pageInitialProps
      });
      $('#ice-container').append(bundleContent);
      $('head').append(`<script>
        window.__ICE_APP_DATA__=${JSON.stringify(initialData)};
        window.__ICE_PAGE_PROPS__=${JSON.stringify(pageInitialProps)};
      </script>`)
    }
  } catch (error) {
    error.name = 'genHtmlErrorError';
    errors.push(error);
    logError('[SSR] generate html template error');
  }
  const html = $.html();
  return { html, errors };
}

function getComponentByPath(routes, currPath)  {
  function findMatchRoute(routeList) {
    const matchedRoute = routeList.find(route => {
      return matchPath(currPath, route);
    });
    return matchedRoute.children ? findMatchRoute(matchedRoute.children) : matchedRoute;
  }
  const matchedRoute = findMatchRoute(routes);
  return matchedRoute && matchedRoute.component;
}

function logError(msg) {
  console.log(
    chalk.red('ERR!'),
    chalk.magenta(msg),
  );
}

export default serverRender;
